import json
import boto3
import logging
import uuid
from aws_xray_sdk.core import xray_recorder
from aws_xray_sdk.core import patch_all
from botocore.exceptions import ClientError

patch_all()

# generated by Terraform
media_bucket_name = 'xproject-dev-media-content-15308'

s3 = boto3.resource('s3')
media_bucket = s3.Bucket(media_bucket_name)
s3_client = boto3.client('s3')

def create_presigned_url(bucket_name, object_name, expiration=3600):
    """Generate a presigned URL to share an S3 object

    :param bucket_name: string
    :param object_name: string
    :param expiration: Time in seconds for the presigned URL to remain valid
    :return: Presigned URL as string. If error, returns None.
    """

    # Generate a presigned URL for the S3 object
    try:
        response = s3_client.generate_presigned_url('get_object',
                                                    Params={'Bucket': bucket_name,
                                                            'Key': object_name},
                                                    ExpiresIn=expiration)
    except ClientError as e:
        logging.error(e)
        return None

    # The response contains the presigned URL
    return response

def create_presigned_upload(bucket_name, object_name,
                          fields=None, conditions=None, expiration=3600):
    """Generate a presigned URL S3 POST request to upload a file

    :param bucket_name: string
    :param object_name: string
    :param fields: Dictionary of prefilled form fields
    :param conditions: List of conditions to include in the policy
    :param expiration: Time in seconds for the presigned URL to remain valid
    :return: Dictionary with the following keys:
        url: URL to post to
        fields: Dictionary of form fields and values to submit with the POST
    :return: None if error.
    """

    # Generate a presigned S3 POST URL
    try:
        response = s3_client.generate_presigned_post(bucket_name,
                                                     object_name,
                                                     Fields=fields,
                                                     Conditions=conditions,
                                                     ExpiresIn=expiration)
    except ClientError as e:
        logging.error(e)
        return None

    # The response contains the presigned URL and required fields
    return response

def lambda_handler(event, context):
    """Sample pure Lambda function

    Parameters
    ----------
    event: dict, required
        API Gateway Lambda Proxy Input Format

        Event doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-input-format

    context: object, required
        Lambda Context runtime methods and attributes

        Context doc: https://docs.aws.amazon.com/lambda/latest/dg/python-context-object.html

    Returns
    ------
    API Gateway Lambda Proxy Output Format: dict

        Return doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
    """
    files_list = []
    if event['httpMethod'] == 'GET' and event['resource'] == '/files/list':
        for bucket_object in media_bucket.objects.all():
            url = create_presigned_url(media_bucket_name, bucket_object.key)
            files_list.append({"Name" :  bucket_object.key, "URI" : url})
    
        if not files_list:
            return {
                "statusCode": 200,
                "body": "There are no files yet.",
            }
        else:
            return {
                "statusCode": 200,
                "body": json.dumps(files_list),  
            }
    elif event['httpMethod'] == 'GET' and event['resource'] == '/files/getuploadurl':
        object_name = str(uuid.uuid4())
        response = create_presigned_upload(media_bucket_name, object_name)
        return {
            "statusCode": 200,
            "body": response,
        }
